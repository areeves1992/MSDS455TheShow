nextIteration <- optimalFunction(x1,x2,x3,x4)
allOptions[i +1, 5] <- nextIteration
nextIterationpass <- passesConstraint(x1,x2,x3,x4)
allOptions[i +1, 6] <- nextIterationpass
print("current")
print(allOptions[i,5])
print("next")
print(nextIteration)
if((allOptions[i,5] < nextIteration) && (allOptions[i + 1, 6] == 1)){
#&&
print("best solution so far!")
allOptions$BestGuess <- 1
}
}
}
allOptions$Output <- -1
allOptions$Passes <- -1
allOptions$BestGuess <- -1
for(i in 1:nrow(allOptions)){
#this is bad coding but i accept it
x1 <- allOptions[i,1]
x2 <- allOptions[i,2]
x3 <- allOptions[i,3]
x4 <- allOptions[i,4]
allOptions[i, 5] <- optimalFunction(x1,x2,x3,x4)
allOptions[i, 6] <- passesConstraint(x1, x2,x3,x4)
if(i < nrow(allOptions) && (i >= 2)){
x1 <- allOptions[i + 1,1]
x2 <- allOptions[i + 1 ,2]
x3 <- allOptions[i + 1,3]
x4 <- allOptions[i + 1,4]
nextIteration <- optimalFunction(x1,x2,x3,x4)
allOptions[i +1, 5] <- nextIteration
nextIterationpass <- passesConstraint(x1,x2,x3,x4)
allOptions[i +1, 6] <- nextIterationpass
print("current")
print(allOptions[i,5])
print("next")
print(nextIteration)
if((allOptions[i,5] < nextIteration) && (allOptions[i + 1, 6] == 1)){
#&&
print("best solution so far!")
allOptions[i + 1, 6] <- 1
}
}
}
allOptions$Output <- -1
allOptions$Passes <- -1
allOptions$BestGuess <- -1
for(i in 1:nrow(allOptions)){
#this is bad coding but i accept it
x1 <- allOptions[i,1]
x2 <- allOptions[i,2]
x3 <- allOptions[i,3]
x4 <- allOptions[i,4]
allOptions[i, 5] <- optimalFunction(x1,x2,x3,x4)
allOptions[i, 6] <- passesConstraint(x1, x2,x3,x4)
if(i < nrow(allOptions) && (i >= 2)){
x1 <- allOptions[i + 1,1]
x2 <- allOptions[i + 1 ,2]
x3 <- allOptions[i + 1,3]
x4 <- allOptions[i + 1,4]
nextIteration <- optimalFunction(x1,x2,x3,x4)
allOptions[i +1, 5] <- nextIteration
nextIterationpass <- passesConstraint(x1,x2,x3,x4)
allOptions[i +1, 6] <- nextIterationpass
print("current")
print(allOptions[i,5])
print("next")
print(nextIteration)
if((allOptions[i,5] < nextIteration) && (allOptions[i + 1, 6] == 1)){
print("best solution so far!")
allOptions[i + 1, 6] <- 1
print(allOptions[i + 1, 6])
}
}
}
allOptions$Output <- -1
allOptions$Passes <- -1
allOptions$BestGuess <- -1
for(i in 1:nrow(allOptions)){
#this is bad coding but i accept it
x1 <- allOptions[i,1]
x2 <- allOptions[i,2]
x3 <- allOptions[i,3]
x4 <- allOptions[i,4]
allOptions[i, 5] <- optimalFunction(x1,x2,x3,x4)
allOptions[i, 6] <- passesConstraint(x1, x2,x3,x4)
if(i < nrow(allOptions) && (i >= 2)){
x1 <- allOptions[i + 1,1]
x2 <- allOptions[i + 1 ,2]
x3 <- allOptions[i + 1,3]
x4 <- allOptions[i + 1,4]
nextIteration <- optimalFunction(x1,x2,x3,x4)
allOptions[i +1, 5] <- nextIteration
nextIterationpass <- passesConstraint(x1,x2,x3,x4)
allOptions[i +1, 6] <- nextIterationpass
print("current")
print(allOptions[i,5])
print("next")
print(nextIteration)
if((allOptions[i,5] < nextIteration) && (allOptions[i + 1, 6] == 1)){
print("best solution so far!")
allOptions[i + 1, 7] <- 1
print(allOptions[i + 1, 7])
}
}
}
allOptions$Output <- -1
allOptions$Passes <- -1
allOptions$BestGuess <- -1
for(i in 1:nrow(allOptions)){
#this is bad coding but i accept it
x1 <- allOptions[i,1]
x2 <- allOptions[i,2]
x3 <- allOptions[i,3]
x4 <- allOptions[i,4]
allOptions[i, 5] <- optimalFunction(x1,x2,x3,x4)
allOptions[i, 6] <- passesConstraint(x1, x2,x3,x4)
if(i < nrow(allOptions) && (i >= 2)){
x1 <- allOptions[i + 1,1]
x2 <- allOptions[i + 1 ,2]
x3 <- allOptions[i + 1,3]
x4 <- allOptions[i + 1,4]
nextIteration <- optimalFunction(x1,x2,x3,x4)
allOptions[i +1, 5] <- nextIteration
nextIterationpass <- passesConstraint(x1,x2,x3,x4)
allOptions[i +1, 6] <- nextIterationpass
print("current")
print(allOptions[i,5])
print("next")
print(nextIteration)
if((allOptions[i,5] < nextIteration) && (allOptions[i + 1, 6] == 1)){
print("best solution so far!")
allOptions[i - 1, 7] <- 0
allOptions[i + 1, 7] <- 1
}
}
}
allOptions %>%
filter(allOptions$Output == max(allOptions$Output)) %>% # filter the data.frame to keep row where x is maximum
select(allOptions$Output)
dplyr::filter(allOptions, BestGuess == 1 && Passes == 1)
dplyr::filter(allOptions, BestGuess == 1)
dplyr::filter(allOptions, (BestGuess == 1)  && (Passes == 1))
dplyr::filter(allOptions, (BestGuess == 1)  & (Passes == 1))
dplyr::filter(filteredData, max(Output))
filteredData <- dplyr::filter(allOptions, (BestGuess == 1)  & (Passes == 1))
dplyr::filter(filteredData, max(Output))
dplyr::filter(filteredData, filter(Output == max(Output)))
filteredData <- dplyr::filter(allOptions, (BestGuess == 1)  & (Passes == 1))
maxOfOutput <- max(filteredData$Output)
filteredData <- dplyr::filter(filteredData, Output == maxOfOutput)
filteredData <- dplyr::filter(allOptions, (BestGuess == 1)  & (Passes == 1))
maxOfOutput <- max(filteredData$Output)
filteredData <- dplyr::filter(filteredData, Output == maxOfOutput)
print("Solution maximized is:")
print(filteredData)
rm(list = ls())
#install.packages("dplyr")
library(dplyr)
library(ggplot2)
#function defs
insidecircle <- function(x,y){
if (between(x, 0, 1) && between (y, 0,1)){
#print("within range")
withinCircle <- x^2 + y^2
isinCircle <- ifelse(withinCircle <= 1, 1, 0)
return(isinCircle)
}else {
print("One of your integers are not between 0 and 1.")
}#end of if else
}#end of function insidecircle
estimatepi <- function(numberOfPairs){
#set.seed(1)
#use runif, not rnorm for uniform random
x <- runif(numberOfPairs, min = 0, max = 1)
y <- runif(numberOfPairs, min = 0, max = 1)
dfofPairs <- data.frame(x,y)
for(i in 1:nrow(dfofPairs)){
dfofPairs[i,3] <- insidecircle(dfofPairs[i,1],dfofPairs[i,2])
}
names(dfofPairs) <- c("x", "y", "isInCircle")
estimateToPi <- (sum(dfofPairs$isInCircle)/numberOfPairs)*4
return(estimateToPi)
}#end function estimatepi
toIncrement <- function(a,b){
increments <- seq(a,b,by = 500)
j = 0
estimates <- c()
for(i in 1:length(increments)){
estimates[i] <- estimatepi(increments[i])
j = j + 1
if (length(estimates) > 2){
if ((pi - t.test(estimates)$conf.int[1] <= .1) && (t.test(estimates)$conf.int[2] - pi <= .1)){
print(increments[i])
print(estimates[i])
sterror <- (sd(estimates)/sqrt(j))
print("sd")
print(sd(estimates))
print(t.test(estimates))
print(c("Standard error:", sterror ))
return(t.test(estimates)$conf.int)
break
}
}
}
}
########################
### end of def
########################
#Find answer for part C
ci <-  toIncrement(1000,10000)
#Part D
estimates <- c()
for (i in 1:500){
estimates[i] <- estimatepi(3000)
}
print("Total number of values in the confidence interval:")
sum(estimates > ci[1] & estimates < ci[2])
qplot(estimates, geom = "histogram", xlab = "Estimates at N = 3000", main = "Histogram of Estimates")
sd(estimates)
467/500
library(devtools)
install_github("mikeasilva/blsAPI")
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("blsR")
?get_series_tables
library(blsR)
?get_series_tables
get_series_table('LNS14000000', NA, 2006, 2006)
get_series_table('APU0000703112', NA)
uer <- get_series_table('APU0000703112', NA)
View(uer)
uer <- get_series_table('APU0000703112', NA, api_key = apiKey)
apiKey <- 'a95e3c18e7084b599a17c987abb10c15'
uer <- get_series_table('APU0000703112', NA, api_key = apiKey)
apiKey <- 'a95e3c18e7084b599a17c987abb10c15'
uer <- get_series_table('APU0000703112', start_year = 1980, api_key = apiKey)
uer <- get_series_table('APU0000703112', start_year = 2000, api_key = apiKey)
uer <- get_series_table('APU0000703112', start_year = '2000', api_key = apiKey)
uer <- get_series_table('APU0000703112', start_year = 2010, api_key = apiKey)
uer <- get_series_table('APU0000703112', start_year = 2010, end_year= 2022, api_key = apiKey)
View(uer)
uer <- get_series_table('APU0000703112', start_year = 1980, end_year= 2022, api_key = apiKey)
View(uer)
eggs <- get_series_table('APU0000708111', start_year = 1980, end_year= 2022, api_key = apiKey)
eggs$Category <- 'Eggs, grade A, large, per doz. avg. price'
View(eggs)
rm(list = ls())
#MSDS455 Week 3 Assignment One
#Amber Reeves
#Create Temporal Chart
#install.packages("devtools")
library(devtools)
#install.packages("blsR")
library(blsR)
#API Key here - this will be blank so as not to share my key
apiKey <- 'a95e3c18e7084b599a17c987abb10c15'
#Fetch the price for ground beef as far back as 1980.
#You can find the series options here:
#https://download.bls.gov/pub/time.series/ap/ap.series
#I choose not to scrape this list and join them together
#as I think the labels are a little verbose for
#the point of this assignment
groundBeef <- get_series_table('APU0000703112', start_year = 1980, end_year= 2022, api_key = apiKey)
#Create a column called category that labels the food type in English
groundBeef$Category <- 'Ground beef, 100% beef, per lb. avg. price'
#Fetch the price for eggs as far back as 1980.
eggs <- get_series_table('APU0000708111', start_year = 1980, end_year= 2022, api_key = apiKey)
#Create a column called category that labels the food type in English
eggs$Category <- 'Eggs, grade A, large, per doz. avg. price'
#Fetch the price for eggs as far back as 1980.
milk <- get_series_table('APU0000709112', start_year = 1980, end_year= 2022, api_key = apiKey)
#Create a column called category that labels the food type in English
milk$Category <- 'Milk, fresh, whole, fortified, per gal. avg. price'
View(milk)
View(milk)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("lifecycle")
install.packages("lifecycle")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("rlang")
install.packages("dplyr")
install.packages("pillar")
update.packages("rlang")
install.packages("rlang")
update.packages("pillar")
install.packages("pillar")
remove.packages(rlang)
install.packages("rlang")
library(rlang)
remove.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
remove.packages(lifecycle)
install.packages("lifecycle")
library(rlang)
install.packages("rlang")
install.packages("rlang", type = "source")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library(scales)
?unit_format
lineGraph <- ggplot(data=priceIndexFood, aes(x=dateOfPrice, y=value, group=Category, color=Category))+
geom_line()  + scale_y_continuous(labels = scales::dollar_format()) + scale_color_fivethirtyeight() + theme_fivethirtyeight() + ggtitle("Average Price Per Grocery Item Over Time")  +
q
lineGraph <- ggplot(data=priceIndexFood, aes(x=dateOfPrice, y=value, group=Category, color=Category))+
geom_line()  + scale_y_continuous(labels = scales::dollar_format()) + scale_color_fivethirtyeight() + theme_fivethirtyeight() + ggtitle("Average Price Per Grocery Item Over Time")
#MSDS455 Week 3 Assignment One
#Amber Reeves
#Create Temporal Chart
#Install and bring in our packages
#install.packages("blsR")
library(blsR)
#install.packages("dplyr")
library(dplyr)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("ggthemes")
library(ggthemes)
#install.packages("scales")
library(scales)
#API Key here - this will be blank so as not to share my key
apiKey <- 'a95e3c18e7084b599a17c987abb10c15'
#Fetch the price for ground beef as far back as 1980.
#You can find the series options here:
#https://download.bls.gov/pub/time.series/ap/ap.series
#I choose not to scrape this list and join them together
#as I think the labels are a little verbose for
#the point of this assignment. There is a "smarter" way
#to fetch all this data but want to show my work.
groundBeef <- get_series_table('APU0000703112', start_year = 1980, end_year= 2022, api_key = apiKey)
#Create a column called category that labels the food type in English
groundBeef$Category <- 'Ground beef, per lb.'
#Fetch the price for eggs as far back as 1980.
eggs <- get_series_table('APU0000708111', start_year = 1980, end_year= 2022, api_key = apiKey)
#Create a column called category that labels the food type in English
eggs$Category <- 'Eggs, per doz.'
#Fetch the price for milk as far back as 1980.
milk <- get_series_table('APU0000709112', start_year = 1980, end_year= 2022, api_key = apiKey)
#Create a column called category that labels the food type in English
milk$Category <- 'Milk, whole per gal.'
priceIndexFood <- rbind(groundBeef, eggs, milk)
priceIndexFood$month <- match(priceIndexFood$periodName,month.name)
priceIndexFood$dateOfPrice <- as.Date(paste0(priceIndexFood$year,"-", priceIndexFood$month,"-", "01"))
lineGraph <- ggplot(data=priceIndexFood, aes(x=dateOfPrice, y=value, group=Category, color=Category))+
geom_line()  + scale_y_continuous(labels = scales::dollar_format()) + scale_color_fivethirtyeight() + theme_fivethirtyeight() + ggtitle("Average Price Per Grocery Item Over Time")
png("foodPriceOverTime.png")
lineGraph
dev.off()
lineGraph
getwd()
priceIndexFood %>%
melt %>%
group_by(Category) %>%
summarize(min = min(value), avg = mean(value), max = max(value))
install.packages("reshape2")
library(reshape2)
priceIndexFood %>%
melt %>%
group_by(Category) %>%
summarize(min = min(value), avg = mean(value), max = max(value))
priceIndexFood %>%
group_by(Category) %>%
summarize(min = min(value), avg = mean(value), max = max(value))
priceIndexFood %>%
group_by(Category) %>%
summarize(min = min(value), max = max(value), avg = mean(value))
apply(priceIndexFood, 1, which.min)
?dplyr::filter
priceIndexFood %>%
filter(Category == 'Ground beef, per lb.')
gb <- priceIndexFood %>%
filter(Category == 'Ground beef, per lb.')
max(gb$value)
min(gb$value)
gb %>% select(value) %>% filter(dateOfPrice == min(dateOfPrice))
gb %>% select(value) %>% slice(which.min(dateOfPrice))
gb %>% slice(which.min(dateOfPrice))
initial <- gb %>% slice(which.min(dateOfPrice))
final <- gb %>% slice(which.max(dateOfPrice))
((final$value - initial$value)/initial$value)
initial <- gb %>% slice(which.min(dateOfPrice))
final <- gb %>% slice(which.max(dateOfPrice))
(((final$value - initial$value)/initial$value) *100)
initial
final
gb <- priceIndexFood %>%
filter(Category == 'Ground beef, per lb.')
initial <- gb %>% slice(which.min(dateOfPrice))
final <- gb %>% slice(which.max(dateOfPrice))
percentChange <- (((final$value - initial$value)/initial$value) *100)
#Cool intro comments go here but I'll come back to those.
###########################################
######### INSTALL PACKAGES ################
#Uncomment the section below if you need the packages
#or if your code errors out.
#install.packages("data.table")
#install.packages("dplyr")
####
library(data.table)
library(dplyr)
######### END OF INSTALL PACKAGES ##########
############################################
###########################################
######### FUNCTION DECLARATIONS ###########
#I need to document this function
fetchData <- function(yearOfData, monthOfData){
#If we already dont have a file called flight data, start it out and download
if(length(list.files(paste0(getwd(),"\\Data"), pattern = "flightData")) < 1) {
print("here?")
#Create a temp file so we dont take up hard drive space
temp <- tempfile()
#Create the url using the parameters
fileURL <- paste0('https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_',yearOfData,'_', monthOfData, '.zip')
#For testing :)
#fileURL <- 'https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_2022_4.zip'
#Download that file to the temp file
download.file(fileURL, temp)
#unzip in the Data dir
unzip(temp, exdir = paste0(getwd(),"\\Data"))
#Create the file path to read it in
fileToReadIn <- paste0(paste0(getwd(),"\\Data") ,"\\", list.files(paste0(getwd(),"\\Data"), pattern = "On_"))
#Read it in quickly
flightDataTemp <- fread(fileToReadIn)
unlink(temp)
#Remove the old one. THIS IS NECESSARY AND WILL CAUSE ISSUES IF NOT RUN
file.remove(fileToReadIn)
#Write/append it to the current flight data csv
fwrite(flightDataTemp, paste0(paste0(getwd(),"\\Data") ,"\\","flightData.csv"), append = TRUE)
return()
#If we do have a file, we want to make sure we already didn't download this
#month and year as this is already an expensive process and we dont want dupes.
}else{
#Read in the current data csv
flightData <- fread(paste0(getwd(),"\\Data\\flightData.csv"))
#filter to the current month and year to fetch
dataCheck <- flightData %>% dplyr::filter(Year == yearOfData, Month == monthOfData)
#Check to see if the data already exisit. If they do, get outta this loop and return
#to the next iteration
if(nrow(dataCheck) > 0){
print(paste0("Already downloaded year ", yearOfData, " and month ", monthOfData,". Moving to next iteration."))
return()
#If the data dont already exist start downloading and appending it.
}else{
#Create a temp file so we dont take up hard drive space
temp <- tempfile()
#Create the url using the parameters
fileURL <- paste0('https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_',yearOfData,'_', monthOfData, '.zip')
#For testing :)
#fileURL <- 'https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_2022_4.zip'
#Download that file to the temp file
download.file(fileURL, temp)
#unzip in the Data dir
unzip(temp, exdir = paste0(getwd(),"\\Data"))
#Create the file path to read it in
fileToReadIn <- paste0(paste0(getwd(),"\\Data") ,"\\", list.files(paste0(getwd(),"\\Data"), pattern = "On_"))
#Read it in quickly
flightDataTemp <- fread(fileToReadIn)
unlink(temp)
#Remove the old one. THIS IS NECESSARY AND WILL CAUSE ISSUES IF NOT RUN
file.remove(fileToReadIn)
#Write/append it to the current flight data csv
fwrite(flightDataTemp, paste0(paste0(getwd(),"\\Data") ,"\\","flightData.csv"), append = TRUE)
#Return and get outta this iteration
return()
}#end of inner else
}#end of outer else
}#end of function fetchData
######END OF FUNCTION DECLARATIONS ########
###########################################
###########################################
######START OF THE CODE ###################
###########################################
#You will have to change this to make it work on your machine.
workingDir <- 'C:\\Users\\areev\\MSDS455TheShow'
setwd(workingDir)
#gui version: https://www.transtats.bts.gov/DL_SelectFields.aspx?gnoyr_VQ=FGJ&QO_fu146_anzr=b0-gvzr
#Set the variables to the start of the data - 1988 and 01/January
yearToFetch <- 2010
monthToFetch <- 1
#While the year is less than 2023 as the data don't exist in the future
while(yearToFetch < 2023){
#While we have not iterated paste 12 or December
while(monthToFetch <= 12){
#Print a message to the user
print(paste0("Currently fetching year: ", yearToFetch, " and month: ", monthToFetch))
#Fetch, download, and append the data.
fetchData(yearOfData = yearToFetch, monthOfData = monthToFetch)
#Iterate through the months increase them by one.
monthToFetch <- monthToFetch + 1
#edit this if when new data become available
if(yearToFetch == 2022 & monthToFetch == 8){
print("Stopping fetching as there is no more data.")
break()
}#end of data checking if
}#End of month while
#If the month is December/12, reset this variable to January or 1
if(monthToFetch > 12){
monthToFetch <- 1
}#end of if
#Iterate through the years, increase the year by one
yearToFetch <- yearToFetch + 1
}#End of the entire while loop
